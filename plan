# Multi‑Agent Chatbot Architecture

## 1. Overview

- **Terminal Application:**  
  Runs as a command‑line interface.  
  - **Command Processing:** Lines starting with “/” are interpreted as system‑level commands (e.g., `/reset`, `/help`, `/reload`).  
  - **Agent Query Routing:** Regular messages are scanned for an agent mention using the “@RoleName” syntax. If present, the message is sent to that role; otherwise, the default role is used.

- **YAML Parts & Merging:**  
  Each YAML file is a simple “part” that maps role names to configuration objects (model parameters, prompt instructions, etc.). All parts are merged sequentially by role name. Later files override earlier ones.

- **Shared Conversation Context:**  
  A global context manager maintains the conversation history. Every agent receives the shared history along with its configuration when generating a response.

---

## 2. YAML Configuration

### A. YAML Part Files

Each YAML file contains role definitions. For example:

#### File 1: `default_roles.yaml`

```yaml
Default:
  model:
    provider: OpenAI
    engine: gpt-4
    temperature: 0.5
    max_tokens: 300
  prompt: "You are the default agent. Provide clear, balanced responses."

Tech:
  model:
    temperature: 0.5
  prompt: "You are the Tech agent. Answer with technical details."
```

#### File 2: `override_roles.yaml`

```yaml
Tech:
  model:
    temperature: 0.3       # Override temperature
    max_tokens: 500        # Override max_tokens
  prompt: "You are AgentTech. Provide thorough technical answers with examples."

Creative:
  model:
    provider: OpenAI
    engine: gpt-4
    temperature: 0.8
    max_tokens: 350
  prompt: "You are AgentCreative. Respond with imaginative ideas and creative metaphors."
```

### B. Merging Rule

- **Concatenation:**  
  The system loads YAML parts in a predetermined order (e.g., first `default_roles.yaml`, then `override_roles.yaml`).
- **Merge by Role Name:**  
  For each role defined in a part file:
  - If the role already exists from an earlier file, the new settings override (or deep‑merge with) the previous values.
  - If a role is defined only in one file, its configuration is used as is.

*Example Merging Result:*

- **Default:** Taken from `default_roles.yaml` (unchanged).
- **Tech:** Settings in `override_roles.yaml` override those in `default_roles.yaml` (temperature becomes 0.3, max_tokens becomes 500, and the prompt is replaced).
- **Creative:** Added from `override_roles.yaml`.

---

## 3. Terminal Application Flow

### A. Startup

1. **Load Configuration:**  
   - Load all YAML part files in order and merge them by role name.
   - The final configuration is a dictionary mapping role names (e.g., Default, Tech, Creative) to their complete settings.

2. **Initialize Modules:**  
   - **Agent Manager:** Instantiates each role as an agent using its merged configuration.
   - **Context Manager:** Initializes and maintains the shared conversation history.
   - **Command Processor:** Prepares to handle system‑level commands (input lines starting with “/”).

### B. Input Processing

1. **System-Level Commands:**  
   - If the input begins with `/`, pass it to the Command Processor.
   - Examples:
     - `/help` – Show help information.
     - `/reset` – Clear conversation history.
     - `/reload` – Reload YAML configurations.

2. **Agent Queries:**  
   - Check if the message starts with an “@RoleName” (e.g., `@Tech`).
   - If a role is specified, route the query to that agent.
   - If no role is mentioned, route the query to the default agent.

3. **Update Context:**  
   - Append both the user input and the agent’s response to the shared conversation history.

### C. Response Generation

1. **Agent Invocation:**  
   - The selected agent receives its complete configuration (from the merged YAML) and the current conversation context.
   - It constructs a prompt combining its private instructions and the shared history.
   - It calls the LLM API with its specific model parameters.

2. **Output:**  
   - The agent’s response is printed to the terminal, prefixed by its role name.

3. **Loop:**  
   - The system continues to process input until the session is terminated.

---

## 4. Summary

- **Modular YAML Parts:**  
  Each YAML file defines roles; these parts are simply concatenated in a set order. Later files override earlier definitions based on role name.

- **Role-Based Inheritance:**  
  Inheritance is handled by merging configurations by role name. This approach avoids complexity by treating each YAML file as an independent, concatenable part.

- **System-Level Commands:**  
  The terminal application recognizes commands (starting with “/”) for session control, separate from agent queries.

- **Shared Context & Routing:**  
  All agents share the conversation history, and user queries are routed to the appropriate role (or default role if none is specified).

This streamlined design makes it easy to manage small, modular YAML files that can be concatenated and merged, keeping your configuration simple and maintainable while supporting flexible role-based inheritance.
